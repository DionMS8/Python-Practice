#-----------------------------BIG O NOTATION--------------------------------------

#THIS IS USED TO MEASURE HOW THE RUNNING TIME AND MEMORY SPACE REQUIREMENTS FOR A
#PROGRAM GROWS AS THE INPUT SIZE GROWS. GENERALLY USED FOR WORST CASE SCENARIO.

#RUNNING TIME MAY BE DIRECTLY PROPORTIONAL TO THE INPUT SIZE

#O(n) WILL BE THE ORDER OF COMPLEXITY IF n ITERATIONS ARE NECESSARY
#O(1) INDICATES CONSTANT TIME OPERATION
#THIS MAY BE THE CASE WHEN ONLY 1 ITERATION IS NECESSARY

#ORDER OF COMPLEXITY:

#FOR TWO (2) ITERATIONS:
time = a * n^2 +b <----------------------------- STANDARD LINEAR EQUATION
#KEEPING THE TERM THAT IS GROWING THE FASTEST
time = a * n^2
#REMOVING THE CONSTANTS
time = n^2
#THEREFORE: O(n^2) <--------- ORDER OF COMPLEXITY

#FOR ONE (1) ITERATION:
time = a * n +b <----------------------------- STANDARD LINEAR EQUATION
#KEEPING THE TERM THAT IS GROWING THE FASTEST
time = a * n
#REMOVING THE CONSTANTS
time = n
#THEREFORE: O(n) <--------- ORDER OF COMPLEXITY

#IF A PROGRAM CONTAINS A FOR LOOP WITH A SECOND FOR LOOP NESTED WITHIN IT AND A
#THIRD FOR LOOP AFTER IT ON THE OUTSIDE, THE LINEAR EQUATION WILL BE:
time = a * n^2 + b * n + c

#KEEPING THE TERM THAT IS GROWING THE FASTEST:
time = a * n^2
#REMOVING THE CONSTANTS:
#time = n^2
#THEREFORE: O(n^2) <--------- ORDER OF COMPLEXITY


#**************************** BINARY SEARCH **************************************

#GIVEN A SORTED ARRAY OF NUMBERS AND REQUIRED TO FIND THE INDEX POSITION OF A
#PARTICULAR NUMBER
#FIND THE MIDDLE ELEMENT AND COMPARE IT TO THE REQUIRED NUMBER
#IF THE MIDDLE ELEMENT IS < THE REQUIRED NUMBER, THEN YOU CAN DISCARD
#THE LEFT SIDE OF THE ARRAY, HOWEVER, IF IT IS > THE REQUIRED NUMBER,
#YOU CAN DISCARD THE RIGHT SIDE OF THE ARRAY
#NOW, YOU FIND THE MIDDLE ELEMENT OF THE REMAINING PORTION OF THE ARRAY


#[SIZE OF ARRAY WHEN REQUIRED NUMBER IS FOUND] = n/2^k
#FOR EXAMPLE:

1 = n/2^k
n = 2^k
log2(n) = log2(2^k)
log2(n) = k*log2(2)
k = logn = O(log(n))

#Note: 'n' IS THE NUMBER OF ELEMENTS IN THE OVERALL ARRAY



